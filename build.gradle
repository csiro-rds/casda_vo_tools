import groovy.lang.Closure;

import java.io.File;

/*
 * Gradle build script for CSIRO CASDA VO Tools web application (casda_vo_tools).
 * Built for Gradle v6.9.1
 * 
 * Primary tasks are:
 *  clean - Remove the contents of the build folder ready for a full rebuild.
 *  build - Compiles the code, builds the war, and runs the tests (this is the most commonly used command)
 *  eclipse - Usually after cleanEclipse - rebuild the eclipse (or STS) classpath and so on.
 */
buildscript {
    repositories { 
		mavenCentral()
	}
    dependencies {
        classpath("org.hidetake:gradle-ssh-plugin:0.3.10")	
    }
}

plugins {
  id "com.github.spotbugs" version "4.6.0"
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'maven-publish'
apply plugin: 'ssh'

group = 'au.csiro'

project.ext.baseName = 'casda_vo_tools'
project.description = """CSIRO CASDA Project - CASDA VO Tools web application"""

ext {
    majorVersion = 1
    minorVersion = 17
    springBootVer = '1.5.22.RELEASE'
    tomcatVer = '8.0.14'
    log4jVersion = '2.16.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    ivy {
        url 'https://github.com/csiro-rds/casda_vo_tools/raw/master/'
        patternLayout {
            artifact 'external-libs/[module]-[revision](-[classifier])(.[ext])'
        }
        metadataSources {
		  artifact()
		}
    }
}

configurations { 
    providedRuntime 
    all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    all*.exclude group: "xerces", module: "xercesImpl"
    all*.exclude group: "org.hamcrest", module: "hamcrest-library"
    all*.exclude group: "org.hamcrest", module: "hamcrest-core"
    // exclude the tomcat libraries so they are not included in the war file
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude group: "org.apache.tomcat.embed"
    compile.exclude group: "org.apache.tomcat"
}

dependencies {
    compile("org.postgresql:postgresql:42.2.5")
    
    compile('org.apache.httpcomponents:httpclient:4.5.13')
    compile("fr.unistra.saada:uws:4")
    compile("cds:adql:1.3")
    compile("gov.nasa.gsfc.heasarc:nom-tam-fits:1.12.0")
    compile("org.springframework.boot:spring-boot-starter-jdbc:${springBootVer}")
    compile("org.springframework.boot:spring-boot-starter-integration:${springBootVer}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVer}")
    compile("org.springframework.boot:spring-boot-starter-web-services:${springBootVer}") 
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVer}")
    
    compile("org.apache.commons:commons-lang3:3.12.0")
	compile "org.apache.commons:commons-collections4:4.4"
    implementation("commons-io:commons-io:2.4")
	compile "com.vividsolutions:jts:1.13"
	compile "org.hibernate:hibernate-core:5.0.12.Final"
	// for date time with time zone information
    compile "joda-time:joda-time:2.10.12"
    
    // reinstate this when upgrade to spring 1.2.5
    compile("org.springframework.boot:spring-boot-starter-log4j2:${springBootVer}")
    compile("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    compile("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
    compile("org.apache.logging.log4j:log4j-web:${log4jVersion}")
    
    compile("com.google.guava:guava:18.0")
    compile("com.esotericsoftware.yamlbeans:yamlbeans:1.06")
    compile('org.yaml:snakeyaml:1.29')
    
    compile(group: 'commons-lang', name: 'commons-lang', version:'2.6')
    
    // jstl needed for the jsp rendering to work
    compile("jstl:jstl:1.2")
    
    //for converting date/time types
    compile ('au.csiro:atnf-ivoa-tools:1.0.8') 
    
    // REST client
    compile group: 'org.apache.cxf', name: 'cxf-rt-rs-client', version:'3.1.2'    
    compile("javax.servlet:javax.servlet-api:3.1.0")
    
    compile('commons-codec:commons-codec:1.10')

    compile 'com.googlecode.jaxb-namespaceprefixmapper-interfaces:JAXBNamespacePrefixMapper:2.2.4'
    
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVer}")
    testCompile('org.mockito:mockito-core:1.10.19')
    
    // More recent version of hamcrest than is included by JUnit
    testCompile("org.hamcrest:java-hamcrest:2.0.0.0")
    testCompile 'org.unitils:unitils-core:3.4.2'
    testCompile 'xmlunit:xmlunit:1.6'
}

apply from: 'gradle/versioning.gradle'

war {
    duplicatesStrategy = "EXCLUDE"
    baseName = 'casda_vo_tools'
}
war.dependsOn makeVersionProps

test {
    testLogging { exceptionFormat "full" }
}

//=====================================================================================================================
//
// JAXB is used to generate XML-parsing Java classes for RTC observation input files.
//
//=====================================================================================================================

configurations { jaxb }

dependencies {
    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41'
    jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7-b41'
    jaxb 'javax.xml.bind:jaxb-api:2.2.7'
    jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics:0.8.1'
}

task javadoc(type: Javadoc, overwrite: true) {
  source = sourceSets.main.allJava
  classpath = configurations.compile
  
  exclude '**/jaxb/**'
  exclude '/net/ivoa/vo/**'
  
}

class JaxbTask extends DefaultTask {

    @Input
    File outputDir
    
    @Input
    String basePackage

    @InputFile
    File schemaFile
    
    @InputFile
    File bindingFile
    
    @Input
    String jaxbToolingClasspath
  
    def Task configure(Closure configureClosure) {
        super.configure(configureClosure)
        outputs.dir outputDir
        project.tasks.clean.delete(outputDir)
        project.tasks.compileJava.source = project.tasks.compileJava.source.plus(outputs.files)
        this
    }

    @TaskAction
    def processXsd() {
        System.setProperty("javax.xml.accessExternalSchema", "file,http")
        System.setProperty("disableXMLSecurity", "true")
        System.setProperty("ANT_OPTS", "-Dcom.sun.tools.xjc.Options.findServices=true")
        outputDir.mkdirs()

        ant.taskdef(
            name: 'xjc',
            classname: 'com.sun.tools.xjc.XJC2Task',
            classpath: jaxbToolingClasspath)
        ant.jaxbTargetDir = outputDir
        ant.xjc(
            destdir: "${outputDir}",
            package: basePackage,
            extension: true,
            classpath: jaxbToolingClasspath) {
            schema(file: schemaFile)
            binding(file: bindingFile)
            arg(line: "-Xinheritance")
        }
    }
}

task jaxbVoTable(type: JaxbTask) {
    jaxbToolingClasspath = configurations.jaxb.asPath
    outputDir = file('src/main/generated')
    schemaFile = file('src/main/resources/schema/VOTable-1.3.xsd')
    basePackage = 'net.ivoa.vo'
    bindingFile = file('src/main/resources/schema/VOTable-1.3_bindings.xjb')
}

task jaxb(dependsOn: [
        tasks.jaxbVoTable
])

//=====================================================================================================================
//
// Eclipse Configuration
//
//=====================================================================================================================

eclipse {
    project { natures 'org.springsource.ide.eclipse.gradle.core.nature' }
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER'
        file {
            withXml { xmlProvider ->
                def node = xmlProvider.asNode()
                node.appendNode('classpathentry', [kind: 'src', path: 'src/main/generated'])
            }
        }
    }
}
tasks.eclipseClasspath.dependsOn tasks.clean, tasks.jaxb

//=====================================================================================================================
//
// Include other build files
//
//=====================================================================================================================

// Produces pmd, findbugs and checkstyle reports.
apply from: 'gradle/report.gradle'

// Produces jacoco code coverage report.
apply from: 'gradle/coverage-report.gradle'

// We conditionally apply the publish script so that we don't need the properties for all builds.
if (gradle.startParameter.taskNames.any{it =~ /publish/}) {
    apply from: 'gradle/publish.gradle'
}

// We conditionally apply the deploy script so that we don't need the properties for all builds.
if (gradle.startParameter.taskNames.contains('deployToServer')) {
    apply from: 'gradle/deploy.gradle'
}

// The status task hits the CASDA Rules service's health check and throws an exception if its not healthy
if (gradle.startParameter.taskNames.contains('status')) {
    apply from: 'gradle/status.gradle'
}

if (!project.hasProperty('targetEnv') && gradle.startParameter.taskNames.any{it =~ /[lL]ocal/ }) { // Only called locally
	apply from: 'gradle/local.tomcat.gradle'
}



